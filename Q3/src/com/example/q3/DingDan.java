package com.example.q3;import java.util.ArrayList;import java.util.List;import org.apache.http.NameValuePair;import org.apache.http.message.BasicNameValuePair;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import android.content.Intent;import android.net.Uri;import android.os.Bundle;import android.text.Spannable;import android.text.SpannableStringBuilder;import android.text.style.ForegroundColorSpan;import android.view.Gravity;import android.view.KeyEvent;import android.view.LayoutInflater;import android.view.MotionEvent;import android.view.View;import android.view.View.OnClickListener;import android.view.View.OnKeyListener;import android.view.View.OnTouchListener;import android.view.ViewGroup;import android.view.ViewGroup.LayoutParams;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.BaseAdapter;import android.widget.Button;import android.widget.ImageView;import android.widget.PopupWindow;import android.widget.ProgressBar;import android.widget.RelativeLayout;import android.widget.TextView;import com.example.view.MyListView;import com.lidroid.xutils.HttpUtils;import com.lidroid.xutils.exception.HttpException;import com.lidroid.xutils.http.RequestParams;import com.lidroid.xutils.http.ResponseInfo;import com.lidroid.xutils.http.callback.RequestCallBack;import com.lidroid.xutils.http.client.HttpRequest;public class DingDan extends BaseActivity{	private RelativeLayout mRl2;	private RelativeLayout mRl11;	private MyListView mLv1;	private ProgressBar mPb1;	   private List<Data1> mlist =new ArrayList<DingDan.Data1>();	   private List<Data1> mlist2 =new ArrayList<DingDan.Data1>();	private ForegroundColorSpan redSpan;	private TextView mTv9;	private Button mBt1;	private MyListView mLv2;	@Override	protected void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);		setContentView(R.layout.dingdan);		       initView();					}	private void initView() {		mPb1 =(ProgressBar)this.findViewById(R.id.mPb1);		mPb1.setVisibility(View.GONE);		mRl11 =(RelativeLayout)this.findViewById(R.id.mRl11);		mRl11.setOnClickListener(listener);				 redSpan = new ForegroundColorSpan(R.color.blue);  		 		 		 			mLv1 =(com.example.view.MyListView)this.findViewById(R.id.mLv1);			mLv1.setOnItemClickListener(new OnItemClickListener() {				@Override				public void onItemClick(AdapterView<?> parent, View view,						int position, long id) {				}			});												initData();			mLv2 =(com.example.view.MyListView)this.findViewById(R.id.mLv2);			mLv2.setOnItemClickListener(new OnItemClickListener() {				@Override				public void onItemClick(AdapterView<?> parent, View view,						int position, long id) {				}			});												initData2();									}	private void initData() {	downsearchdata("0");}public void downsearchdata(String ss){	mPb1.setVisibility(View.VISIBLE);	 RequestParams params = new RequestParams();   List<NameValuePair> nameValuePairs=new ArrayList<NameValuePair>(10);   nameValuePairs.add(new BasicNameValuePair("id", 1+""));   params.addBodyParameter(nameValuePairs);   HttpUtils http = new HttpUtils();   http.send(HttpRequest.HttpMethod.POST,  		 "http://pine.i3.com.hk/q3/json/sjfoodlist.php",           params,           new RequestCallBack<String>() {				private String msg;				private Myadapter adapter;				@Override				public void onFailure(HttpException arg0, String arg1) {									}				@Override				public void onSuccess(ResponseInfo<String> arg0) {					JSONObject jsonObject;					try {						jsonObject = new JSONObject(arg0.result);						String string_code = jsonObject.getString("code");						 msg = jsonObject.getString("msg");												 int  num_code=Integer.valueOf(string_code);						 if (num_code==1) {							 //保存到本地							 mlist.clear();							 JSONArray array = jsonObject.getJSONArray("data");							 for(int i=0;i<array.length();i++){								 Data1 d1 =new Data1();								 d1.mTv1=array.getJSONObject(i).getString("num");								 d1.mTv2=array.getJSONObject(i).getString("name");								 mlist.add(d1);							 }							 mPb1.setVisibility(View.GONE);                            initd1a();						 }						 else {									mPb1.setVisibility(View.GONE);						}					} catch (JSONException e) {						mPb1.setVisibility(View.GONE);					}				}				private void initd1a() {						adapter =new Myadapter();					mLv1.setAdapter(adapter);}        });}class Data1 {	public String mTv1;	public String mTv2;	public String mTv3;	public String mTv4;	public String mTv5;		}	class Holder{		TextView mTv1,mTv2,mTv3,mTv4,mTv5;		ImageView mIv2,mIv3,mIv1;		Button mBtn2,mBtn1;	}	class  Myadapter extends   BaseAdapter{		@Override		public View getView(final int position, View convertView, ViewGroup parent) {			        						Holder holder = null;			if(convertView==null){				convertView = LayoutInflater.from(getApplicationContext())						.inflate(R.layout.item_listview_5, null);				holder = new Holder();								holder.mTv1 =(TextView)convertView.findViewById(R.id.mTv1);				holder.mTv2 =(TextView)convertView.findViewById(R.id.mTv2);				convertView.setTag(holder);			}else{				holder =(Holder)convertView.getTag();			}			holder.mTv2.setText(mlist.get(position).mTv2+"x"+mlist.get(position).mTv1);			//holder.mTv2.setText(mlist.get(position).mTv2);			return convertView;		}		@Override		public int getCount() {			// TODO Auto-generated method stub			return mlist.size();		}		@Override		public Object getItem(int position) {			// TODO Auto-generated method stub			return null;		}		@Override		public long getItemId(int position) {			// TODO Auto-generated method stub			return 0;		}	}		private void initData2() {	downsearchdata2("0");}public void downsearchdata2(String ss){	mPb1.setVisibility(View.VISIBLE);	 RequestParams params = new RequestParams();   List<NameValuePair> nameValuePairs=new ArrayList<NameValuePair>(10);   nameValuePairs.add(new BasicNameValuePair("id", 1+""));   params.addBodyParameter(nameValuePairs);   HttpUtils http = new HttpUtils();   http.send(HttpRequest.HttpMethod.POST,  		 "http://pine.i3.com.hk/q3/json/sjdrinks.php",           params,           new RequestCallBack<String>() {				private String msg;				private Myadapter adapter;				private Myadapter2 adapter2;				@Override				public void onFailure(HttpException arg0, String arg1) {									}				@Override				public void onSuccess(ResponseInfo<String> arg0) {					JSONObject jsonObject;					try {						jsonObject = new JSONObject(arg0.result);						String string_code = jsonObject.getString("code");						 msg = jsonObject.getString("msg");												 int  num_code=Integer.valueOf(string_code);						 if (num_code==1) {							 //保存到本地							 mlist2.clear();							 JSONArray array = jsonObject.getJSONArray("data");							 for(int i=0;i<array.length();i++){								 Data1 d1 =new Data1();								 d1.mTv1=array.getJSONObject(i).getString("type");								 d1.mTv2=array.getJSONObject(i).getString("name");								 mlist2.add(d1);							 }							 mPb1.setVisibility(View.GONE);                            initd1a();						 }						 else {									mPb1.setVisibility(View.GONE);						}					} catch (JSONException e) {						mPb1.setVisibility(View.GONE);					}				}				private void initd1a() {						adapter2 =new Myadapter2();					mLv2.setAdapter(adapter2);}        });}	class  Myadapter2 extends   BaseAdapter{		@Override		public View getView(final int position, View convertView, ViewGroup parent) {			        						Holder holder = null;			if(convertView==null){				convertView = LayoutInflater.from(getApplicationContext())						.inflate(R.layout.item_listview_5, null);				holder = new Holder();								holder.mTv1 =(TextView)convertView.findViewById(R.id.mTv1);				holder.mTv2 =(TextView)convertView.findViewById(R.id.mTv2);				convertView.setTag(holder);			}else{				holder =(Holder)convertView.getTag();			}			holder.mTv2.setText(mlist2.get(position).mTv2);			//holder.mTv2.setText(mlist.get(position).mTv2);			return convertView;		}		@Override		public int getCount() {			// TODO Auto-generated method stub			return mlist2.size();		}		@Override		public Object getItem(int position) {			// TODO Auto-generated method stub			return null;		}		@Override		public long getItemId(int position) {			// TODO Auto-generated method stub			return 0;		}	}					public void dowhat(){		int total =0;		for (int i = 0; i < mlist.size(); i++) {			total =total+	Integer.valueOf(mlist.get(i).mTv5)*Integer.valueOf(mlist.get(i).mTv2);		}		mTv9.setText(total+"");	}	OnClickListener listener =new OnClickListener() {				@Override		public void onClick(View v) {			switch (v.getId()) {			case R.id.mBt1:				startActivity(new Intent(getApplicationContext(), CanYin.class));				break;			case R.id.mRl11:				AppManager.getAppManager().finishActivity();				break;			case R.id.mRl2:				ShowWindow();				break;			default:				break;			}		}	};	private View layout;	private Button mBtSure;	private Button mBtCancel;	private PopupWindow mPop;		public void ShowWindow(){		LayoutInflater mLayoutInflater = (LayoutInflater) this.getSystemService(LAYOUT_INFLATER_SERVICE);		 layout = mLayoutInflater.inflate(R.layout.pop1, null);		 mBtSure =(Button)layout.findViewById(R.id.mBtSure);		 mBtSure.setOnClickListener(new OnClickListener() {						@Override			public void onClick(View v) {				startActivity( new Intent(Intent.ACTION_CALL,Uri.parse("tel:"+"10086")));			}		});		 mBtCancel =(Button)layout.findViewById(R.id.mBtCancel);		 mBtCancel.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {             	mPop.dismiss();				mPop = null;			}		});		 mPop = new PopupWindow(layout,LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);		 mPop.setFocusable(true);		 mPop.setOutsideTouchable(true);				 mPop.update();		//位置在R.id.button的正下方		 //mPop.showAsDropDown(findViewById(R.id.mTvfjc1), 15,8);		 mPop.showAtLocation(findViewById(R.id.mRlcg1), Gravity.CENTER, 0, 0);			layout.setOnKeyListener(new OnKeyListener() {				@Override				public boolean onKey(View v, int keyCode, KeyEvent event) {					switch (keyCode) {					case KeyEvent.KEYCODE_BACK:						if (mPop != null && mPop.isShowing()) {			             	mPop.dismiss();							mPop = null;							return true;						}						break;					default:						break;					}					return false;				}			});			layout.setOnTouchListener(new OnTouchListener() {				@Override				public boolean onTouch(View v, MotionEvent event) {					 if (mPop != null && mPop.isShowing()) {				        mPop.dismiss();					  mPop = null; }					 return true;				}			});		 	}}